---
title: "Homework 5"
format: 
    html:
        embed-resources: true
---


__Due Date:__ 2024-11-20 at 8:30 AM PT
---


__Name:__ Sabahat Zafar


## Preparation

1. We're using the same [data file](https://github.com/gabehassler/PRGS-Intro-to-ML-2024/blob/main/data/processed/svi_covid.csv) from GitHub as the last assignment.
If should be in the _data/processed_ folder.
# Done


## Homework - Neural Newtorks
#Importing Libraries
```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
import torch
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
```
```{python}
# Get cpu, gpu or mps device for training.
device = (
    "cuda"
    if torch.cuda.is_available()
    else "mps"
    if torch.backends.mps.is_available()
    else "cpu"
)
print(f"Using {device} device")

```


##a1. Use a simple neural network to predict the number of per-capita COVID-19 deaths in each county in the US using the SVI variables.
The outcome variable is`total_deaths_per_100k` and the predictor variables are `EP_POV150, EP_UNEMP, EP_HBURD, EP_NOHSDP, EP_UNINSUR, EP_AGE65, EP_AGE17, EP_DISABL, EP_SNGPNT, EP_LIMENG, EP_MINRTY, EP_MUNIT, EP_MOBILE, EP_CROWD, EP_NOVEH, EP_GROUPQ, EP_NOINT`.
The neural network should have one hidden layer with 10 nodes and use the ReLU activation function.
##loading data file
```{python}
def load_data(file_path):
    return pd.read_csv(file_path)
if __name__ == "__main__":
 # Specify the file path as a string
   file_path = "/home/RAND.ORG/sabahat/Sabahat-PRGS-Intro-to-ML-2024/homework/code/data/processed/svi_covid.csv"
# Function to load the data
   df = load_data(file_path)
### Defining predictor and outcome variables

# Splitting dataset into training and testing sets


```

##Plot the predicted values against the true values.
##Plotting the Predicted vs True Values

```{python}
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('True Values')
plt.ylabel('Predicted Values')
plt.title('Predicted vs True Values')
plt.show()
```

##What is the mean squared error of the 
predictions in the test set?
# Calculate the mean squared error
```{python}
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
```

#Answer: Mean Squared Error is 18154.14


##2. Repeat the analysis from the previous question, but this time use a more complicated neural network with more hidden layers and/or more nodes in the hidden layers.
You should experiment with different architectures and activation functions to see what works best.
```{python}
# Define predictor and outcome variables
X = df[['EP_POV150', 'EP_UNEMP', 'EP_HBURD', 'EP_NOHSDP', 'EP_UNINSUR', 
        'EP_AGE65', 'EP_AGE17', 'EP_DISABL', 'EP_SNGPNT', 'EP_LIMENG', 
        'EP_MINRTY', 'EP_MUNIT', 'EP_MOBILE', 'EP_CROWD', 'EP_NOVEH', 
        'EP_GROUPQ', 'EP_NOINT']]
y = df['total_deaths_per_100k']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define the model

model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(1)
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, verbose=1)

# Predict on the test set
y_pred = model.predict(X_test_scaled)

# Calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

#Plot the predicted values against the true values.
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('True Values')
plt.ylabel('Predicted Values')
plt.title('Predicted vs True Values')
plt.show()
```

#What is the mean squared error of the predictions in the test set?

#Answer: The mean squared error of the prediction in this test set is 17330.987


3. Compare the predictions of the neural network in Question 2 to the predictions of the regression tree from the previous assignment. Which model would you use to predict the number of per-capita COVID-19 deaths? Why?

#Answer: When comapred the neural network results with the predictions of the regression tree from last assignment, it appears that the mse is lower in both models in neural netwrok compared with regression tree. So we can use the neural network to predict the number of per-capita COVID-19 deaths.

#Which model would you use to understand the relationship between the SVI variables and the number of per-capita COVID-19 deaths? Why?

##Answer:To understand the relationship, between SVI  variables and the number of per-capita COVID-19 deaths the regression is more easier  approach compared to neural network, since the regression tree provides the visual representaion of decision rules. The neural network approach seems a black box since it does not provide any kind of explaination about how the  varibales are related with each other.

##I used Chat GPT to generate codes.